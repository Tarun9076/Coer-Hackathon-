<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
<title>PathSafe Admin Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #daf1fc 0%, #fcfafa 100%);
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #0d6efd;
            color: white;
            padding: 1.5rem;
            text-align: center;
            font-size: 2rem;
            box-shadow: 0 2px 8px rgba(64,120,192,0.14);
            letter-spacing: 1.5px;
        }
        #auth-container {
            max-width: 320px;
            margin: 2rem auto 2rem auto;
            padding: 1.2rem 2rem;
            border: 1px solid #ddd;
            border-radius: 12px;
            background: #fff;
            box-shadow: 0 2px 12px rgba(64,120,192,0.07);
        }
        #auth-container h2 {
            margin-top: 0;
            margin-bottom: 1rem;
            text-align: center;
            color: #1f47af;
        }
        #auth-container input[type="text"],
        #auth-container input[type="password"] {
            width: 100%;
            padding: 0.7rem;
            margin-bottom: 0.9rem;
            border: 1px solid #bbb;
            border-radius: 6px;
        }
        #auth-container button {
            width: 100%;
            padding: 0.8rem;
            background: #0d6efd;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1.08rem;
            font-weight: 500;
            box-shadow: 0 1px 4px rgba(64,120,192,0.08);
            transition: background 0.18s;
        }
        #auth-container button:hover {
            background-color: #1e82e3;
        }
        #auth-message {
            text-align: center;
            margin-top: 0.75rem;
            color: #219150;
            font-weight: 500;
        }
        .container {
            display: flex;
            gap: 2.2rem;
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.2rem;
            height: calc(100vh - 92px);
        }
        #map {
            flex: 2;
            height: 93vh;
            min-width: 55vw;
            border-radius: 12px;
            box-shadow: 0 4px 18px rgba(64,120,192,0.07);
        }
        #alerts {
            flex: 1;
            min-width: 350px;
            background: #f3f8fb;
            border-left: 2px solid #99cdf3;
            border-radius: 14px;
            box-shadow: 0 2px 10px rgba(64,120,192,0.08);
            padding: 1.8rem 1.2rem 1.2rem 1.2rem;
            margin-top: 0.2rem;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }
        .search-bar {
            display: flex;
            gap: .5rem;
            padding-bottom: 1.1rem;
        }
        .search-input {
            border: 1.5px solid #89b5f7;
            border-radius: 7px;
            font-size: 1.08rem;
            padding: .42rem .8rem;
            width: 72%;
        }
        .search-btn {
            background: #0982e3;
            color: white;
            border: none;
            border-radius: 7px;
            font-size: 1.05rem;
            padding: .46rem 1.2rem;
            cursor: pointer;
            box-shadow: 0 1px 6px rgba(64,120,192,0.08);
            font-weight: 500;
            transition:.2s all;
        }
        .search-btn:hover { background: #0d6efd; }
        .sos-btn {
            position: relative;
            background: #ff3b30;
            color: white;
            padding: 0.7rem 1.5rem;
            border-radius: 2rem;
            font-size: 1.18rem;
            font-weight: bold;
            border: none;
            box-shadow: 0 2px 12px rgba(255,36,0,0.16);
            cursor: pointer;
            align-self: flex-end;
            margin-bottom: 1.2rem;
            transition: background 0.19s, box-shadow 0.17s;
            z-index: 50;
            outline: none;
        }
        .sos-btn:hover {
            background: #d82318;
            box-shadow: 0 2px 20px rgba(255,36,0,0.22);
        }
        .sos-icon {
            font-size: 1.35rem;
            margin-right: 0.5rem;
            vertical-align: middle;
        }
        #weather-card {
            position: sticky;
            top: 0;
            margin-left: auto;
            margin-bottom: 1.35rem;
            background: #ffffffcc;
            backdrop-filter: blur(1px);
            border-radius: 11px;
            box-shadow: 0 4px 20px rgba(64,120,192,0.11);
            padding: 1.4rem 1rem 1.2rem 1rem;
            min-width: 260px;
            max-width: 350px;
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 20;
        }
        #weather-card .weather-main {
            display: flex;
            align-items: center;
            gap: 1.05rem;
            font-size: 1.22rem;
        }
        #weather-card .temp {
            font-size: 2.23rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        #weather-card .weather-icon {
            width: 48px;
            height: 48px;
        }
        #weather-card .details {
            color: #295a7b;
            margin-top: 0.4rem;
            font-size: 1rem;
            text-align: center;
        }
        #weather-card .location {
            margin-top: 0.9rem;
            color: #3460a7;
            font-size: 0.97rem;
            text-align: center;
        }
        #alerts h2 {
            margin-top: .5rem;
            margin-bottom: 1.1rem;
            font-size: 1.35rem;
            color: #0d6efd;
            letter-spacing: .5px;
        }
        #alert-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .alert-card {
            box-shadow: 0 2px 8px rgba(64,120,192,0.10);
            border-radius: 10px;
            background: #fff;
            margin-bottom: 1.4rem;
            padding: 1rem 1.3rem;
            border-left: 5px solid #40a9ff;
            transition: box-shadow 0.17s;
        }
        .alert-card:hover {
            box-shadow: 0 4px 16px rgba(64,120,192,0.14);
        }
        .alert-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.16rem;
            font-weight: 600;
        }
        .badge {
            padding: 2px 12px;
            border-radius: 12px;
            color: white;
            font-size: 0.99rem;
            margin-left: 0.5rem;
            font-weight: 500;
            letter-spacing: .5px;
        }
        .alert-icon {
            font-size: 1.45rem;
            margin-right: 0.5rem;
        }
        .alert-title {
            flex: 1;
            font-size: 1.13rem;
            letter-spacing: .5px;
            color: #203b74;
        }
        .alert-details {
            margin-top: 0.64rem;
            font-size: 1rem;
            color: #295a7b;
        }
        .alert-details .desc {
            margin-top: 0.32rem;
            color: #4b5764;
            font-size: 0.98rem;
        }
        .no-alert {
            background: #e9faef;
            border-radius: 9px;
            padding: 1.15rem;
            margin-top: 1rem;
            color: #2a7752;
            font-size: 1.08rem;
            text-align: center;
            font-weight: 500;
            box-shadow: 0 1px 4px rgba(64,120,192,0.06);
        }
        .legend {
            margin-top:2.2rem; color:#678;text-align: left;
        }
        @media (max-width:950px) {
            .container {
                flex-direction: column;
                gap: 0.91rem;
                height: auto;
            }
            #map, #alerts, #weather-card {
                min-width: 100%;
                margin: 0;
                max-width: 100vw;
            }
            #alerts {
                max-height: none;
            }
            #weather-card {
                margin-bottom: 1.8rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>PathSafe Dashboard</h1>
    </header>
    <div id="auth-container">
        <h2>User Login / Signup</h2>
        <form id="auth-form">
            <input type="text" id="username" placeholder="Username" required />
            <input type="password" id="password" placeholder="Password" required />
            <button type="submit">Login / Signup</button>
        </form>
        <div id="auth-message"></div>
    </div>
    <div class="container" style="display:none;" id="main-container">
        <div id="map"></div>
        <div id="alerts">
            <form class="search-bar" id="search-form" autocomplete="off" spellcheck="false">
                <input class="search-input" id="search-input" type="text" placeholder="Search location, city, village..." />
                <button class="search-btn" type="submit"><span>üîç</span> Search</button>
            </form>
            <button class="sos-btn" id="sos-btn"><span class="sos-icon">üö®</span>EMERGENCY SOS</button>
            <div id="weather-card" style="display:none;">
              <!-- Weather summary will appear here -->
            </div>
            <h2>Current Alerts</h2>
            <ul id="alert-list"></ul>
            <div class="legend">
                <small>
                    <b>Legend:</b>
                    <span style="color:#295a7b;">üåä Flood</span>,
                    <span style="color:#295a7b;">üåßÔ∏è Rain</span>,
                    <span style="color:#295a7b;">‚õàÔ∏è Storm</span>
                    <br>
                    Colors: <span style="color:#ff4d4f;">Severe</span>, <span style="color:#ffc53d;">Moderate</span>, <span style="color:#40a9ff;">Minor</span>
                </small>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const DEMO_API_KEY = 'c8b2b08c026c0f94c61fc231526b4e41'; // Replace with your own API key for unlimited use
        const alertData = [
            {
                id: "alert1",
                event_type: "flood",
                severity: "severe",
                effective: "2025-10-05T00:00:00",
                expires: "2025-10-06T00:00:00",
                areas: [
                    {
                        districts: ["DistrictA", "DistrictB"],
                        description: "Heavy rainfall has led to river overflow. Risk of flooding in low lying areas near Roorkee and Haridwar.",
                        polygon: {
                            type: "Polygon",
                            coordinates: [
                                [
                                    [77.0, 28.0],
                                    [78.0, 28.0],
                                    [78.0, 29.0],
                                    [77.0, 29.0],
                                    [77.0, 28.0]
                                ]
                            ]
                        }
                    }
                ]
            }
        ];

        let userMarker = null;
        let map = null;

        function renderAlertItem(alert) {
            const iconMap = {
                "flood": "üåä",
                "rain": "üåßÔ∏è",
                "storm": "‚õàÔ∏è",
                "heat": "üå°Ô∏è"
            };
            const severityColor = {
                "severe": "#ff4d4f",
                "moderate": "#ffc53d",
                "minor": "#40a9ff"
            };
            const area = alert.areas[0];
            return `
                <div class="alert-card" style="border-left:5px solid ${severityColor[alert.severity] || '#40a9ff'};">
                    <div class="alert-header">
                        <span class="alert-icon">${iconMap[alert.event_type] || "‚ö†Ô∏è"}</span>
                        <span class="alert-title">${alert.event_type.toUpperCase()}</span>
                        <span class="badge" style="background:${severityColor[alert.severity]};">
                            ${alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                        </span>
                    </div>
                    <div class="alert-details">
                        <div><b>Affected:</b> ${area.districts.join(", ")}</div>
                        <div><b>Valid:</b> ${alert.effective.replace("T", " ")} to ${alert.expires.replace("T", " ")}</div>
                        <div class="desc">${area.description || "No further details."}</div>
                    </div>
                </div>
            `;
        }

        const loginForm = document.getElementById('auth-form');
        const authMessage = document.getElementById('auth-message');
        const authContainer = document.getElementById('auth-container');
        const mainContainer = document.getElementById('main-container');
        const sosBtn = document.getElementById('sos-btn');
        const searchForm = document.getElementById('search-form');
        const searchInput = document.getElementById('search-input');

        sosBtn.onclick = function() {
            alert("SOS emergency request sent!\nSafety teams will contact your location if enabled.\n(This demo just shows a popup. You can wire it to a real service.)");
        };

        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value.trim();
            if (username && password) {
                sessionStorage.setItem('loggedInUser', username);
                authMessage.style.color = '#219150';
                authMessage.textContent = `Welcome, ${username}!`;
                setTimeout(() => {
                    authContainer.style.display = 'none';
                    mainContainer.style.display = 'flex';
                    initializeMap();
                }, 700);
            } else {
                authMessage.style.color = '#ff5252';
                authMessage.textContent = 'Please enter username and password.';
            }
        });


        function loadAlertsOnSidebar(weatherAlerts) {
            const alertList = document.getElementById("alert-list");
            let html = "";
            if (weatherAlerts && weatherAlerts.length > 0) {
                weatherAlerts.forEach(alert => {
                    html += `<li>${renderAlertItem({
                        event_type: alert.event || "alert",
                        severity: alert.severity || "severe",
                        effective: alert.start ? new Date(alert.start*1000).toISOString().slice(0,19) : "",
                        expires: alert.end ? new Date(alert.end*1000).toISOString().slice(0,19) : "",
                        areas: [{
                            districts: ["Live Location"],
                            description: alert.description || alert.tags?.join(", ")
                        }]
                    })}</li>`;
                });
            }
            if (alertData.length > 0) {
                alertData.forEach(alert => {
                    html += `<li>${renderAlertItem(alert)}</li>`;
                });
            }
            if (!html) {
                html = '<li class="no-alert"><span style="color:green;">‚úÖ No current alerts.</span></li>';
            }
            alertList.innerHTML = html;
        }

        function updateWeatherCard(data, locationName) {
            const card = document.getElementById('weather-card');
            if (!data || !data.current) {
                card.style.display = 'none';
                return;
            }
            const weatherDesc = data.current.weather[0].main;
            const weatherDetail = data.current.weather[0].description;
            const iconUrl = `https://openweathermap.org/img/wn/${data.current.weather[0].icon}@2x.png`;
            const temp = Math.round(data.current.temp);
            card.innerHTML = `
              <div class="weather-main">
                <img class="weather-icon" src="${iconUrl}" alt="${weatherDesc}" />
                <div><div class="temp">${temp}¬∞C</div>
                <div>${weatherDesc}</div></div>
              </div>
              <div class="details">
                <span>Humidity: ${data.current.humidity}%</span><br>
                <span>Wind: ${Math.round(data.current.wind_speed)} km/h</span><br>
                <span style="color:#497cbb">"${weatherDetail.charAt(0).toUpperCase() + weatherDetail.slice(1)}"</span>
              </div>
              <div class="location">
                <span>üìç ${locationName ? locationName : "Live Location"}</span>
              </div>
            `;
            card.style.display = 'block';
        }

        async function getLocationName(lat, lon) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`);
                const data = await response.json();
                return data.address.city || data.address.town || data.address.village || data.address.state || "";
            } catch {
                return "";
            }
        }

        async function moveToLocation(lat, lon, locationName = "") {
            if(userMarker) {
                map.removeLayer(userMarker);
            }
            userMarker = L.marker([lat, lon], {title: locationName || "Selected Location"}).addTo(map);
            userMarker.bindPopup(locationName || "Selected Location").openPopup();
            map.setView([lat, lon], 12);

            await fetchWeather(lat, lon, async (weatherAlertsAndData) => {
                let weatherAlerts = weatherAlertsAndData.filter(a => a.event_type !== 'weather');
                const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=${DEMO_API_KEY}`;
                const res = await fetch(url);
                const data = await res.json();
                updateWeatherCard(data, locationName);
                loadAlertsOnSidebar(weatherAlerts);
            });
        }

        async function initializeMap() {
            const uttarakhandBounds = [[28.4, 77.4], [31.3, 81.0]];
            map = L.map('map', {
                maxBounds: uttarakhandBounds,
                maxBoundsViscosity: 1.0,
                minZoom: 7,
                maxZoom: 13
            }).setView([30.0668, 79.0193], 8);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            alertData.forEach(alert => {
                alert.areas.forEach(area => {
                    const latlngs = area.polygon.coordinates[0].map(coord => [coord[1], coord[0]]);
                    const color = alert.severity === "severe" ? "#ff4d4f" : (alert.severity === "moderate" ? "#ffc53d" : "#40a9ff");
                    const polygon = L.polygon(latlngs, {
                        color,
                        fillColor: color,
                        fillOpacity: 0.24
                    }).addTo(map);
                    polygon.bindPopup(`
                        <div style="font-weight:bold;text-transform:uppercase;color:${color};margin-bottom:6px;">
                            ${alert.event_type} (${alert.severity})
                        </div>
                        <div style="color:#295a7b;">
                            <b>Effective:</b> ${alert.effective.replace("T", " ")}<br>
                            <b>Expires:</b> ${alert.expires.replace("T", " ")}<br>
                            <b>Districts:</b> ${area.districts.join(", ")}<br>
                            <b>Description:</b> ${area.description}
                        </div>
                    `);
                });
            });

            // On first load, use geolocation
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(async function(position) {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    const locationName = await getLocationName(lat, lon);
                    moveToLocation(lat, lon, locationName);
                }, function(error) {
                    alert('Location access denied or unavailable. Use the search bar to find your area.');
                    loadAlertsOnSidebar();
                });
            } else {
                loadAlertsOnSidebar();
            }
        }

        function fetchWeather(lat, lon, callback) {
            const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=${DEMO_API_KEY}`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const weatherAlerts = data.alerts || [];
                    const weatherCard = {
                        event_type: "weather",
                        severity: "minor",
                        effective: new Date().toISOString().slice(0,19),
                        expires: "",
                        areas: [{
                            districts: ["Live Location"],
                            description: `Weather: ${data.current.weather[0].description}, Temperature: ${data.current.temp}¬∞C`
                        }]
                    };
                    callback([weatherCard, ...weatherAlerts]);
                })
                .catch(err => {
                    const alertList = document.getElementById('alert-list');
                    alertList.innerHTML = `<li class="no-alert"><span style="color:#ff4d4f;">‚ùå Error loading weather data</span></li>`;
                    if (alertData.length > 0) {
                        alertData.forEach(alert => {
                            alertList.innerHTML += `<li>${renderAlertItem(alert)}</li>`;
                        });
                    }
                });
        }

        searchForm.addEventListener('submit', async function(e){
            e.preventDefault();
            const query = searchInput.value.trim();
            if(!query) return;
            // Use OpenStreetMap Nominatim
            fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(query)}+uttarakhand`)
                .then(res => res.json())
                .then(results => {
                    if(results && results.length > 0){
                        const place = results[0];
                        moveToLocation(parseFloat(place.lat), parseFloat(place.lon), place.display_name);
                    }
                    else { alert('Location not found. Try another name!'); }
                })
                .catch(()=>alert('Error searching location.'));
        });

        window.onload = () => {
            const loggedInUser = sessionStorage.getItem('loggedInUser');
            if (loggedInUser) {
                authContainer.style.display = 'none';
                mainContainer.style.display = 'flex';
                initializeMap();
            }
        };
    </script>
</body>
</html>
